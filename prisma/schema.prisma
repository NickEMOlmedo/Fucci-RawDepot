generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Quality {
  good
  average
  poor
}

model Admin {
  id           Int          @id @default(autoincrement())
  firstName    String       @db.VarChar(30)
  lastName     String       @db.VarChar(30)
  dni          Int          @unique
  email        String       @db.VarChar(255)
  password     String       @db.VarChar(255)
  isSuperAdmin Boolean      @default(false)
  entries      Entry[]
  withdrawals  Withdrawal[]
  updatedAt    DateTime     @updatedAt()

  @@index([dni])
}

model Employee {
  id          Int          @id @default(autoincrement())
  firstName   String       @db.VarChar(30)
  lastName    String       @db.VarChar(30)
  dni         Int          @unique
  password    String       @db.VarChar(255)
  area        String       @db.VarChar(30)
  role        String       @db.VarChar(30)
  withdrawals Withdrawal[]
  updatedAt   DateTime     @updatedAt()

  @@index([dni])
}

model Product {
  id                 Int                       @id @default(autoincrement())
  name               String                    @db.VarChar(30)
  brand              String                    @db.VarChar(30)
  manufacturer       String                    @db.VarChar(30)
  presentation       String                    @db.VarChar(30)
  stock              Int
  lots               Lot[]
  Entry              Entry[]
  updatedAt          DateTime                  @updatedAt()
  WithdrawalProducts WithdrawalDetailProduct[]

  @@index([name])
  @@index([brand])
  @@index([presentation])
}

model Entry {
  id              Int      @id @default(autoincrement())
  product         Product  @relation(fields: [productId], references: [id])
  productId       Int
  receiptCode     String   @db.VarChar(30)
  deliveryCompany String   @db.VarChar(30)
  entryDate       DateTime @db.Date
  quantity        Int
  status          Quality
  admin           Admin    @relation(fields: [adminId], references: [id])
  adminId         Int
  updatedAt       DateTime @updatedAt()

  @@index([receiptCode])
  @@index([deliveryCompany])
  @@index([entryDate])
  @@index([status])
  @@index([adminId])
  @@index([productId])
}

model Lot {
  id             Int      @id @default(autoincrement())
  lotNumber      String   @db.VarChar(50)
  expirationDate DateTime @db.Date
  quantity       Int
  product        Product  @relation(fields: [productId], references: [id])
  productId      Int
  updatedAt      DateTime @updatedAt()

  @@index([lotNumber])
  @@index([expirationDate])
}

model Withdrawal {
  id                Int                @id @default(autoincrement())
  withdrawalDate    DateTime           @db.Date
  employee          Employee?          @relation(fields: [employeeId], references: [id])
  employeeId        Int?
  withdrawalDetails WithdrawalDetail[]
  admin             Admin?             @relation(fields: [adminId], references: [id])
  adminId           Int?
  updatedAt         DateTime           @updatedAt()

  @@index([employeeId])
  @@index([adminId])
  @@index([withdrawalDate])
}

model WithdrawalDetail {
  id                   Int                       @id @default(autoincrement())
  notes                String?                   @db.VarChar(100)
  withdrawal           Withdrawal                @relation(fields: [withdrawalId], references: [id])
  withdrawalId         Int
  updatedAt            DateTime                  @updatedAt()
  withdrawalProducts   WithdrawalDetailProduct[]

  @@index([withdrawalId])
}

model WithdrawalDetailProduct {
  id                 Int              @id @default(autoincrement())
  withdrawalDetail   WithdrawalDetail @relation(fields: [withdrawalDetailId], references: [id])
  withdrawalDetailId Int
  product            Product          @relation(fields: [productId], references: [id])
  productId          Int
  quantity           Int
  status             Quality

  @@index([withdrawalDetailId])
  @@index([productId])
  @@index([quantity])
}
